int precedence(char op) {
    if(op == '+' || op == '-') {
        return 1;
    } else if(op == '*' || op == '/') {
        return 2;
    } else {
        return 0; 
    }
}

void doProcess(int* operand, char* operator, int* top1, int* top2) {
    int b = operand[*top1];
    int a = operand[*top1 - 1];
    char op = operator[*top2];

    int result;
    if (op == '+') {
        result = a + b;
    } else if (op == '-') {
        result = a - b;
    } else if (op == '*') {
        result = a * b;
    } else if (op == '/') {
        result = a / b;
    }

    operand[*top1 - 1] = result;
    (*top1)--;  
    (*top2)--;  
}

int calculate(char* s) {
    int size = strlen(s);
    int operand[size], top1 = -1;
    char operator[size];
    int top2 = -1;

    for (int i = 0; i < size; i++) {
        if (isdigit(s[i])) {
      
            int num = 0;
            while (i < size && isdigit(s[i])) {
                num = num * 10 + (s[i] - '0');
                i++;
            }
            i--;  

            operand[++top1] = num;
        } 
        else if (s[i] == '(') {
            operator[++top2] = s[i];
        }
        else if (s[i] == ')') {
            while (top2 >= 0 && operator[top2] != '(') {
                doProcess(operand, operator, &top1, &top2);
            }
            top2--;
        } 
        else if (s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/') {

            while (top2 >= 0 && precedence(operator[top2]) >= precedence(s[i])) {
                doProcess(operand, operator, &top1, &top2);
            }

            operator[++top2] = s[i];
        }
    }

    while (top2 >= 0) {
        doProcess(operand, operator, &top1, &top2);
    }

    return operand[top1];
}
